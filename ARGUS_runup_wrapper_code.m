%% Compute horizontal runup excursion timeseries from ARGUS timestacks (RuBy2D)
clear all
tic
% input directory where data is - one deloyment per folder
local_dir = uigetdir(pwd,'Local Directory'); % Volumes/LANGE_Passport/ARGUS_runup
cd(local_dir)

code_dir = fullfile(local_dir, 'runupTool');
data_dir = fullfile(local_dir, 'DATA');
addpath(genpath(code_dir))
addpath(genpath(data_dir))
mkdir(fullfile(data_dir, 'runup'))
user = string(inputdlg('Full Name','Today''s user:')); % this will be used in case of any questions if multiple people are processing the data

%% Find all the files you need to process
files_data = dir(fullfile(data_dir, 'data')); 
files_data(ismember({files_data.name}, {'.', '..', '.DS_Store'})) = []; % this removes extra folders that Mac OS creates
files_runup = dir(fullfile(data_dir, 'runup')); files_runup(ismember({files_runup.name}, {'.', '..'})) = [];

file_names = char({files_data.name}); file_names = file_names(:, 1:end-4);
if length(files_runup) > 0
    runup_names = char({files_runup.name}); runup_names = unique(string(runup_names(:, 1:end-11)));

    count = 0;
    for ii = length(files_data):-1:1
        if ~contains(runup_names,file_names(ii,:)) % runup file does not exist in runup folder
            count = count+1;
        end
    end
    disp(['There are ' char(string(count)) ' files left to process.'])
else
    runup_names = char();
    disp(['There are ' char(string(length(files_data))) ' files left to process.'])
end

%% Loop through all files to be done
 
for ii = 1:length(files_data)
    % if a given file is incorrect - you will have to delete the corresponding
    % runup file for it to process
    if ~contains(runup_names,file_names(ii,:)) % runup file does not exist in runup folder
        disp(['Timestack ' file_names(ii,:) ' is being processed.'])
        
        runupTool(data_dir, file_names(ii,:), user)
        disp('Click any key to continue')
        pause
    else
        disp(['Timestack ' file_names(ii,:) ' has already been processed.'])
        disp(['Please delete file in order to continue.'])
        ButtonName = questdlg('Would you like to delete runup file and redo?', ...
            'Reprocess Runup?',...
                    'Yes','No', 'No');
        switch ButtonName
        case 'Yes'
            delete(fullfile(data_dir, 'runup', [file_names(ii,:) '.runup.mat']))
        end % check if runup file should be deleted
    end % if runup file needs to be processed
end % loop through all files in folder

%% 
% figure
% image(stackData.XYZ(:,1),stackData.T,stackData.RAW)
% hold on
% plot(stackData.XYZ(runup.Ri,1),stackData.T, 'r')

%% New runupTool function
function runupTool(data_dir, file_name, user)
    dataPATH = fullfile(data_dir, 'data', [file_name '.mat']);
     
    data = load(dataPATH);
    disp(['Total of ' char(string(length(data.pixInst))) ' timestacks to process'])
    %% Grid or transect
    % This will need improving. Hard coding Ruby2D here - in future can be
    % a drop down / selection of which MOP lines to run. 
    if data.pixInst.type == 'Grid'
        ButtonName = questdlg('Is this Torrey Pines?', ...
            'Extract MOP lines',...
                    'Yes','No', 'Yes');
        switch ButtonName
            case 'Yes'
                yloc = [-100 0 100 133 200 300 400]';
                id_yloc = dsearchn(data.pixInst.Y(:,1), yloc);
                for ll = 1:length(yloc)
                    data.pixInst(length(data.pixInst)+1).type = 'xTransect';
                    data.pixInst(length(data.pixInst)).dx = 5;
                    data.pixInst(length(data.pixInst)).xlim = data.pixInst(1).xlim;
                    data.pixInst(length(data.pixInst)).y = yloc(ll);
                    data.pixInst(length(data.pixInst)).z = {};
                    data.pixInst(length(data.pixInst)).X = data.pixInst(1).X(id_yloc(ll),:);
                    data.pixInst(length(data.pixInst)).Y = round(data.pixInst(1).Y(id_yloc(ll),:));
                    data.pixInst(length(data.pixInst)).Z = data.pixInst(1).Z(id_yloc(ll),:);
                    data.pixInst(length(data.pixInst)).Irgb = permute(squeeze(data.pixInst(1).Irgb(id_yloc(ll),:,:,:)), [1 3 2]);
                end
                data.pixInst(1)=[];

            case 'No'
                disp('Other locations besides Torrey Pines have not been set')
                return
        end
    end
    %% loop through every alongshore transect
    for gg = 1:length(data.pixInst)
        %%
        disp('Click any key to continue')
        pause
        gg
        clearvars -except data_dir file_name dataPATH data gg user gg_all
        close all
        confirmed = 0;
        MOP = char(string(data.pixInst(gg).y/100 + 582));

        % check that using 2Hz data
        aa = datetime(data.t(1:11), 'ConvertFrom', 'datenum', 'TimeZone', 'UTC');; 
        if aa(11) - aa(1) == seconds(1); d_id = 5; else d_id = 1; end 
    
        % load data into stackData
        stackData.RAW = fliplr(permute(data.pixInst(gg).Irgb(:, 1:d_id:end,:), [2 1 3])); % need to set up file in same format as ARGUS
        stackData.T = posixtime(datetime(data.t(:, 1:d_id:end), 'ConvertFrom', 'datenum', 'TimeZone', 'UTC'));
        stackData.XYZ = [flipud(-data.pixInst(gg).X) data.pixInst(gg).Y data.pixInst(gg).Z];
%%
        figure(10);clf
        image(data.pixInst(gg).Irgb)
        ButtonName = questdlg('Is runup line visible?', ...
            ['MOP = ' MOP],...
                    'Yes','No', 'Yes');
        if contains(ButtonName, 'Yes')

                inputStructure.imageName = file_name; % OG image name
                inputStructure.y_index = gg; % index in pixInst
                inputStructure.dataLoc = dataPATH; % where image is located
                
                P = parameters('P');
                
                saveStructure.user = user;
                % orginal data info
                saveStructure.imageName = inputStructure.imageName;
                saveStructure.y_index = inputStructure.y_index;
                saveStructure.dataLoc = inputStructure.dataLoc;
                % runup data info
                saveStructure.savename = [file_name '_MOP' MOP '.runup']; % save runup under this name
                saveStructure.outPathName = fullfile(data_dir, 'runup', saveStructure.savename); % save location
                
                currentData.scrnum = 0; %start with the first screen.. silly
                
                %***FIX: for runup stacks with pixels from multiple cameras, need to
                %sort by x-coordinate (runup was appearing in wrong cross-shore location)
                [~,ind]=sort(stackData.XYZ(:,1));
                
                stackData.data = double(stackData.RAW(:,ind));
                
                stackData.params = struct;
                stackData.params.lines = length(stackData.T);                         %length of time stack/series
                stackData.epoch = stackData.T;
                stackData.xyz = stackData.XYZ(ind,:);
                
                %% ---------------------- GUI ----------------------
                % keyboard
                toolFigure  = parameters('toolFigure');
                
                version   = parameters('version');
                
                set(gcf,'Color',[1 1 1]);
                
                b=uicontrol('Parent',gcf, 'style', 'text','units',...
                    'normalized','position',version.position,...
                    'BackgroundColor',version.bcolor,'string','0.0');
                
                syncro = parameters('syncro');
                
                b=uicontrol('Parent',gcf,...
                    'style', 'text','units',...
                    'normalized',...
                    'position',syncro.position, ...
                    'Tag','syncroTag',...
                    'userData',gcf,...
                    'FontSize',syncro.fontsize,...
                    'fontweight',syncro.fontweight,...
                    'BackgroundColor',syncro.bcolor,...
                    'ForegroundColor',syncro.fcolor,...
                    'string',int2str(get(gcf,'Number')));
                
                forward = parameters('forward');
                
                b = uicontrol('Parent',gcf, ...
                    'Units','normalized', ...
                    'BackgroundColor',forward.bcolor, ...
                    'ForegroundColor',forward.fcolor, ...
                    'Callback','showScreen(1)', ...
                    'Position',forward.position, ...
                    'String','Down', ...
                    'Tag','forwardButtonTag',...
                    'FontSize',forward.fontsize,...
                    'fontweight',forward.fontweight);
                
                reverse = parameters('reverse');
                
                 b = uicontrol('Parent',gcf, ...
	                    'Units','normalized', ...
	                    'BackgroundColor',reverse.bcolor, ...
                    'ForegroundColor',reverse.fcolor, ...
	                    'Callback','showScreen(-1)', ...
	                    'Position',reverse.position, ...
	                    'String','Up', ...
	                    'Tag','backButtonTag',...
                    'FontSize',reverse.fontsize,...
                    'fontweight',reverse.fontweight);
                
                edit = parameters('edit');
                
                b = uicontrol('Parent',gcf, ...
                    'Units','normalized', ...
                    'BackgroundColor',edit.bcolor, ...
                    'ForegroundColor',edit.fcolor,...
                    'Callback','linearEditPoints', ...
                    'Position',edit.position, ...
                    'String','Edit', ...
                    'Tag','editButtonTag',...
                    'FontSize',edit.fontsize,...
                    'fontweight',edit.fontweight);
                
                save = parameters('save');
                
                b = uicontrol('Parent',gcf, ...
                    'Units','normalized', ...
                    'BackgroundColor',save.bcolor, ...
                    'Callback','saveRunup', ...
                    'Position',save.position, ...
                    'String','Save', ...
                    'Tag','saveButtonTag',...
                    'FontSize',save.fontsize,...
                    'fontweight',save.fontweight);
                
                quit = parameters('quit');
                
                b = uicontrol('Parent',gcf, ...
                    'Units','normalized', ...
                    'BackgroundColor',quit.bcolor, ...
                    'Callback','quitRunup', ...
                    'Position',quit.position, ...
                    'String','Quit', ...
                    'Tag','quitButtonTag',...
                    'FontSize',quit.fontsize,...
                    'fontweight',quit.fontweight);
                
                %%this exists only as storage containers.. 
                b = uicontrol('Parent',gcf, ...
                    'Units','normalized', ...
                    'BackgroundColor',save.bcolor, ...
                    'Callback','edgeDetect; makeLine;', ...
                    'Position',[.85 0.85 0.007 0.002], ...
                    'String','e', ...
                    'Tag','edgeButtonTag');
                
                %%this also exists only as a storage container.. 
                 b = uicontrol('Parent',gcf, ...
	                    'Units','normalized', ...
	                    'BackgroundColor',save.bcolor, ...
	                    'Callback','backgroundIntensity', ...
	                    'Position',[.85 .4 0.007 0.002], ...
	                    'String','Calculate BG', ...
	                    'Tag','backgroundIntensityTag');
                
                setIThreshUp = parameters('setIThreshUp');
                
                b = uicontrol('Parent',gcf, ...
                    'Units','normalized', ...
                    'BackgroundColor',setIThreshUp.bcolor, ...
                    'Callback','setIThreshUp', ...
                    'Position',setIThreshUp.position, ...
                    'String','Save', ...
                    'style', 'slider', ...
                    'min',setIThreshUp.min, 'max',setIThreshUp.max, ...
                    'value', P.IThreshUp, ...
                    'Tag','IThreshUp');
                
                setIThreshDown = parameters('setIThreshDown');
                
                b = uicontrol('Parent',gcf, ...
                    'Units','normalized', ...
                    'BackgroundColor',setIThreshDown.bcolor, ...
                    'Callback','setIThreshDown', ...
                    'Position',setIThreshDown.position, ...
                    'String','Save', ...
                    'style', 'slider', ...
                    'min', setIThreshDown.min, 'max',setIThreshDown.max, ...
                    'value',P.IThreshDown, ...
                    'Tag','IThreshDown');
                
                setmaxRundown = parameters('setmaxRundown');
                
                b = uicontrol('Parent',gcf, ...
                    'Units','normalized', ...
                    'BackgroundColor',setmaxRundown.bcolor, ...
                    'Callback','setmaxRundown', ...
                    'Position',setmaxRundown.position, ...
                    'String','Save', ...
                    'style', 'slider', ...
                    'min',setmaxRundown.min, 'max',setmaxRundown.max, ...
                    'value', P.maxRundown, ...
                    'Tag','maxRundown');
                
                setNFiltLight = parameters('setNFiltLight');
                
                b = uicontrol('Parent',gcf, ...
                    'Units','normalized', ...
                    'BackgroundColor',setNFiltLight.bcolor, ...
                    'Callback','setNFiltLight', ...
                    'Position',setNFiltLight.position, ...
                    'String','Save', ...
                    'style', 'slider', ...
                    'min',setNFiltLight.min, 'max',setNFiltLight.max, ...
                    'value', P.NFiltLight, ...
                    'Tag','NFiltLight');
                
                setNFiltDark = parameters('setNFiltDark');
                
                b = uicontrol('Parent',gcf, ...
                    'Units','normalized', ...
                    'BackgroundColor',setNFiltDark.bcolor, ...
                    'Callback','setNFiltDark', ...
                    'Position',setNFiltDark.position, ...
                    'String','Save', ...
                    'style', 'slider', ...
                    'min', setNFiltDark.min, 'max', setNFiltDark.max, ...
                    'value', P.NFiltDark, ...
                    'Tag','NFiltDark');
                
                valIThreshUp = parameters('valIThreshUp');
                b=uicontrol('Parent',gcf, 'style', 'text','units',...
                    'normalized','position',valIThreshUp.position, ...
                    'BackgroundColor',valIThreshUp.bcolor,'string',P.IThreshUp);
                
                valIThreshDown = parameters('valIThreshDown');
                b=uicontrol('Parent',gcf, 'style', 'text','units',...
                    'normalized','position',valIThreshDown.position, ...
                    'BackgroundColor',valIThreshDown.bcolor,'string',P.IThreshDown);
                
                valmaxRundown = parameters('valmaxRundown');
                b=uicontrol('Parent',gcf, 'style', 'text','units',...
                    'normalized','position',valmaxRundown.position, ...
                    'BackgroundColor',valmaxRundown.bcolor,'string',P.maxRundown);
                
                valNFiltLight = parameters('valNFiltLight');
                b=uicontrol('Parent',gcf, 'style', 'text','units',...
                    'normalized','position',valNFiltLight.position, ...
                    'BackgroundColor',valNFiltLight.bcolor,'string',P.NFiltLight);
                
                valNFiltDark = parameters('valNFiltDark');
                b=uicontrol('Parent',gcf, 'style', 'text','units',...
                    'normalized','position',valNFiltDark.position, ...
                    'BackgroundColor',valNFiltDark.bcolor,'string',P.NFiltDark);
                
                tagIThreshUp = parameters('tagIThreshUp');
                b=uicontrol('Parent',gcf, 'style', 'text','units',...
                    'normalized','position',tagIThreshUp.position, ...
                    'BackgroundColor',tagIThreshUp.bcolor,'string',tagIThreshUp.name);
                
                tagIThreshDown = parameters('tagIThreshDown');
                b=uicontrol('Parent',gcf, 'style', 'text','units',...
                    'normalized','position',tagIThreshDown.position, ...
                    'BackgroundColor',tagIThreshDown.bcolor,'string',tagIThreshDown.name );
                
                tagmaxRundown = parameters('tagmaxRundown');
                b=uicontrol('Parent',gcf, 'style', 'text','units',...
                    'normalized','position',tagmaxRundown.position, ...
                    'BackgroundColor',tagmaxRundown.bcolor,'string',tagmaxRundown.name );
                
                tagNFiltLight = parameters('tagNFiltLight');
                b=uicontrol('Parent',gcf, 'style', 'text','units',...
                    'normalized','position',tagNFiltLight.position, ...
                    'BackgroundColor',tagNFiltLight.bcolor,'string',tagNFiltLight.name );
                
                tagNFiltDark = parameters('tagNFiltDark');
                b=uicontrol('Parent',gcf, 'style', 'text','units',...
                    'normalized','position',tagNFiltDark.position, ...
                    'BackgroundColor',tagNFiltDark.bcolor,'string',tagNFiltDark.name);
                
                currentDisplay = parameters('currentDisplay');
                b=uicontrol('Parent',gcf, 'style', 'text','units',...
                    'normalized','position',currentDisplay.position, ...
                    'BackgroundColor',currentDisplay.bcolor,...
                    'string',currentDisplay.string);
                
                displayImage = parameters('displayImage');
                b=uicontrol('Style', 'listbox','units','normalized', 'String',...
                    displayImage.string,'position',displayImage.position,...
                    'BackgroundColor',displayImage.bcolor,...
                    'tag', 'listbox','Callback','displayImage');
                
                cacheHandles
                handle = get (gcf,'userData'); % retreive from the cache
                
                set (handle.maxRundown,             'UserData',                     P);
                set (handle.saveButtonTag,          'UserData',         saveStructure);
                set (handle.forwardButtonTag,       'UserData',           currentData);
                set (handle.backButtonTag,          'UserData',             stackData);
                
                if confirmed == 1
                    set (handle.edgeButtonTag,          'UserData', runup.runup.Ri);
                end
                %%
                %bring up the first screen;
                showScreen(1);

        end % switch
    end %% gg - run through alongshore transects
    disp(['Done with transect ' file_name])
end %% end of function